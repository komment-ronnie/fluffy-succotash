[
  {
    "name": "source.java",
    "path": "source.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that provides information about a page of data. The class has fields for the current page number, page size, total pages, and total elements, which are populated using the `Pageable` interface and `Page` interface. A static `of` method creates a new `PageInfo` instance with the given pageable and page parameters.",
        "items": [
          {
            "id": "70a6a435-f815-ecba-f14b-2cc86377ff44",
            "ancestors": [],
            "description": "Is used to represent metadata about a page of data. It contains four fields: currentPage, pageLimit, totalPages, and totalElements. These fields are used to calculate various pagination-related metrics, such as the number of pages required to display a certain amount of data or the total number of elements in all pages.",
            "name": "PageInfo",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 19,
            "docLength": null
          },
          {
            "id": "40c3db18-37e6-21a8-2a4c-dd0295bd9ed7",
            "ancestors": [
              "70a6a435-f815-ecba-f14b-2cc86377ff44"
            ],
            "description": "Generates a `PageInfo` object containing information about the number of pages, page size, total pages, and total elements of a given `Pageable` and `Page`.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pageable object that contains information about the current page of data being processed, providing the page number and size for calculation of the total pages and elements in the dataset.",
                "complex_type": false
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page of results being processed, providing the total number of elements on that page.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing pagination information for the given `pageable` and `page`.",
              "complex_type": false
            },
            "name": "of",
            "location": {
              "start": 20,
              "insert": 20,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source1.java",
    "path": "source1.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that holds information about a page of results from a larger dataset. The class has four fields: currentPage, pageLimit, totalPages, and totalElements, which are initialized using a constructor that takes a `Pageable` object and a `Page` object as parameters. Additionally, a static `of()` method is provided to create a new instance of the `PageInfo` class with the given page number, page size, total pages, and total elements from a `Pageable` and `Page`. The method returns an instance of the `PageInfo` class.",
        "items": [
          {
            "id": "f9b78986-5c32-34b8-3642-d753c9280fd6",
            "ancestors": [],
            "description": "Provides a compact representation of page metadata for use in Spring Data applications. It includes current and total pages, as well as the number of elements in each page. The class also provides a factory method for creating new instances based on a pageable object and the corresponding page.",
            "name": "PageInfo",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 18,
            "docLength": null
          },
          {
            "id": "cbf085d6-5755-97be-8745-c89c786c5d56",
            "ancestors": [
              "f9b78986-5c32-34b8-3642-d753c9280fd6"
            ],
            "description": "Generates a `PageInfo` object containing information about the current page of a paginated dataset, including the page number, size, total pages, and total elements.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and size that the method operates on, providing the necessary context for calculating the resulting page information.",
                "complex_type": false
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page being processed, providing information on its position within the paginated data set and the total number of pages and elements available.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing page number, size, total pages, and total elements.",
              "complex_type": false
            },
            "name": "of",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source1.py",
    "path": "source1.py",
    "content": {
      "structured": {
        "description": "A deep learning model called DepthAnythingV2 and trains it on a dataset for depth estimation using the Hypersim, VKITTI2, or KITTI datasets. The model is trained using the AdamW optimizer and evaluated at various epochs using the SiLogLoss metric. The code also includes a checkpointing system to save the model weights and optimizer states during training.",
        "items": [
          {
            "id": "6404241d-11fc-489b-f543-181f9b442f4d",
            "ancestors": [],
            "description": "Generates high-quality summaries of Java code based on user input. It performs various tasks, including setting up a distributed training environment for a depth estimation model using PyTorch and TensorFlow, defining the training and validation sets, and tracking the model's performance during training.",
            "params": [],
            "returns": null,
            "name": "main",
            "location": {
              "start": 41,
              "insert": 42,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 166,
            "docLength": null
          }
        ]
      }
    }
  }
]